#include "ResidualLayer.hpp"
using namespace std;
using namespace espresso;


ResidualLayer::ResidualLayer(layerInfo_t layerInfo) : Layer(layerInfo) {}


ResidualLayer::~ResidualLayer() {
	if(m_blob.flData) {
		free(m_blob.flData);
	}
	if(m_blob.fxData) {
		free(m_blob.fxData);
	}
}


void ResidualLayer::ComputeLayerParam() {
	// input size
	m_inputDepth   = m_bottomLayers[0]->m_outputDepth;
	m_numInputRows = m_bottomLayers[0]->m_numOutputRows;
	m_numInputCols = m_bottomLayers[0]->m_numOutputCols;

	// output size
	m_outputDepth = m_inputDepth;
	m_numOutputRows = m_numInputRows;
	m_numOutputCols = m_numInputCols;
    
	// create output blob
	m_blob.depth = m_outputDepth;
	m_blob.numRows = m_numOutputRows;
	m_blob.numCols = m_numOutputCols;
    m_blob.blobSize = m_outputDepth * m_numOutputRows * m_numOutputCols;
    m_blob.flData = (float*)malloc(m_outputDepth * m_numOutputRows * m_numOutputCols * sizeof(float));
    m_blob.fxData = (fixedPoint_t*)malloc(m_outputDepth * m_numOutputRows * m_numOutputCols * sizeof(fixedPoint_t));
}


void ResidualLayer::ComputeLayer() {
	if (m_precision == FLOAT) {  
		ComputeLayer_FlPt();
	} else if(m_precision == FIXED) { 
		ComputeLayer_FxPt();
	}
}


void ResidualLayer::ComputeLayer_FlPt() {
    if(m_bottomLayers[0]->m_precision == FIXED) {
        int dinNumFracBits   = m_bottomLayers[0]->m_dinNumFracBits;
        int blobSize         = m_bottomLayers[0]->m_blob.blobSize;
        fixedPoint_t *fxData = m_bottomLayers[0]->m_blob.fxData;
        float        *flData = m_bottomLayers[0]->m_blob.flData;
        for(int i = 0; i < blobSize; i++) {
            flData[i] = fixedPoint::toFloat(dinNumFracBits, fxData[i]);
        }
    }
        
	
    // get input
    float *datain = m_bottomLayers[0]->m_blob.flData;
    int numInputBlobRows = m_bottomLayers[0]->m_blob.numRows;
    int numInputBlobCols = m_bottomLayers[0]->m_blob.numCols;
    int inputBlobDepth = m_bottomLayers[0]->m_blob.depth;
        
	
    // output
    float *dataout = m_topLayers[0]->m_blob.flData;

    
	for (uint32_t i = 0; i < m_bottomLayers.size(); i++) {
		for (int m = 0; m < inputBlobDepth; m++) {
			for (int x = 0, a = 0; x < m_numOutputRows; x++, a += m_stride) {
				for(int y = 0, b = 0; y < m_numOutputCols; y++, b += m_stride) {
					index3D(m_outputDepth, m_numOutputRows, m_numOutputCols, dataout, m, x, y)
						= index3D(m_bottomLayers[0]->m_blob.depth, m_bottomLayers[0]->m_blob.numRows, m_bottomLayers[0]->m_blob.numCols, m_bottomLayers[0]->m_blob.flData, m, x, y)
						+ index3D(m_bottomLayers[1]->m_blob.depth, m_bottomLayers[1]->m_blob.numRows, m_bottomLayers[1]->m_blob.numCols, m_bottomLayers[1]->m_blob.flData, m, x, y);
				}
			}
		}
	}
}


void ResidualLayer::ComputeLayer_FxPt() {

}
